
class SavedataHeader extends SelectItemGroupSprite{
	var _imgNumber;

	var _type;
	var _number;
	var _realDate;
	var _gameDate;
	var _comment;
	var _thumb;
	var _root;
	var _commentEdit;

	var _btn = [];
	var _sprNumber;
	var _sprRealDate;
	var _sprGameDate;
	var _sprComment;
	var _sprThumb;
	var _sprRoot;

	var _messOver = false;
	var _scrollTimer;
	var _scrollX = 0;

	function SavedataHeader(win, par){
		super.SelectItemGroupSprite(win, par);

		_sprThumb = new global.Layer(win, this);
		with(_sprThumb){
			.setSize(IMG_SAVEDATA_ALPHA.width, IMG_SAVEDATA_ALPHA.height);
			.hitThreshold = 256;
			.setPos(61, 23);
			.face = dfMask;
			.copyRect(0, 0, IMG_SAVEDATA_ALPHA, 0, 0, IMG_SAVEDATA_ALPHA.width, IMG_SAVEDATA_ALPHA.height);
			.holdAlpha = true;
			.face = dfMain;			//以後、メインのコピだけ。
			.fillRect(0, 0, .width, .height, 0);
		}

		_sprRoot = new global.Layer(win, this);
		with(_sprRoot){
			.hitThreshold = 256;
			.setPos(0, 0);
			.visible = true;
		}

		_btn[0] = new Button(win, this);
		_btn[0].create(IMG_SAVEDATA_BTN, 2);

		hasImage = true;
		setSize(_btn[0].width, _btn[0].height);
		copyRect(0, 0, IMG_SAVEDATA_BASE, 0, 0, IMG_SAVEDATA_BASE.width, IMG_SAVEDATA_BASE.height);

		_imgNumber = IMG_SAVEDATA_NUM;

		_sprGameDate = new global.Layer(win, this);
		with(_sprGameDate){
			.setSize(207, 27);
			.hitThreshold = 256;
			.setPos(32, 147);
			.font.height = 24;
			.visible = true;
		}
		_sprComment = new global.Layer(win, this);
		with(_sprComment){
			.setSize(282, 23);
			.hitThreshold = 256;
			.setPos(6, 153);
			.font.face = GetFontFace("21");
			.absolute = 1000;
			.visible = true;
		}

		_sprNumber = new global.Layer(win, this);
		with(_sprNumber){
			.setSize((IMG_SAVEDATA_NUM.width/11)*5, IMG_SAVEDATA_NUM.height);
			.hitThreshold = 256;
			.setPos(70, 7);
			.visible = true;
		}
		_sprRealDate = new global.Layer(win, this);
		with(_sprRealDate){
			.setSize(IMG_SAVEDATA_ALPHA.width, 20);
			.hitThreshold = 256;
			.setPos(_sprThumb.left, _sprThumb.top + _sprThumb.height - .height-4);
			.font.height = 15;
			.visible = true;
		}

		_btn[1] = new ControlButton(win, _btn[0]);
		_btn[1].create(IMG_SAVEDATA_COM1, 2);
		_btn[1].setPos(259, 153);
		_btn[2] = new ControlButton(win, _btn[0]);
		_btn[2].create(IMG_SAVEDATA_COPY, 2);
		_btn[2].setPos(214, 33);
		_btn[3] = new ControlButton(win, _btn[0]);
		_btn[3].create(IMG_SAVEDATA_MOVE, 2);
		_btn[3].setPos(214, 61);
		_btn[4] = new ControlButton(win, _btn[0]);
		_btn[4].create(IMG_SAVEDATA_DEL, 2);
		_btn[4].setPos(214, 89);
		_btn[5] = new ControlToggleButton(win, _btn[0]);
		_btn[5].create(IMG_SAVEDATA_LOCK, 4);
		_btn[5].setPos(252, 8);
		for(var i=1;i<_btn.count;i++) _btn[i].visible = false;

		_scrollTimer = new Timer(onScrollComment, "");
		_scrollTimer.interval = 24;
	}
	function finalize(){
		InvalidateArray(_btn);
		invalidate _sprNumber;
		invalidate _sprGameDate;
		invalidate _sprRealDate;
		invalidate _sprComment;
		invalidate _sprThumb;
		invalidate _sprRoot;
		invalidate _scrollTimer;
		super.finalize();
	}

	function set(type=0, no, realDate, gameDate, comment, thumb, root, commentEdit){
		reset();
		_type = type;
		_number = no;
		_realDate = realDate;
		_gameDate = gameDate;
		_comment = comment;
		_thumb = thumb;
		_root = root;
		_commentEdit = commentEdit;
	}

	function setupInfo(){
		if(_number != -1){
			var w = IMG_SAVEDATA_NUM.width / 11;

			var book = (_number-1) \ 90;
			var num = (_number - book*90) % 91;
			book++;

			//book
			_sprNumber.copyRect(w*0, 0, IMG_SAVEDATA_NUM, w*(book\10), 0, w, IMG_SAVEDATA_NUM.height);
			book %= 10;
			_sprNumber.copyRect(w*1, 0, IMG_SAVEDATA_NUM, w*(book%10), 0, w, IMG_SAVEDATA_NUM.height);

			//ハイフン
			_sprNumber.copyRect(w*2, 0, IMG_SAVEDATA_NUM, w*10, 0, w, IMG_SAVEDATA_NUM.height);

			//num
			_sprNumber.copyRect(w*3, 0, IMG_SAVEDATA_NUM, w*(num\10), 0, w, IMG_SAVEDATA_NUM.height);
			num %= 10;
			_sprNumber.copyRect(w*4, 0, IMG_SAVEDATA_NUM, w*(num%10), 0, w, IMG_SAVEDATA_NUM.height);
		}

		with(_sprGameDate){
			if(_gameDate != ""){
				.fillRect(0, 0, .width, .height, 0);
				var w = .font.getTextWidth(_gameDate);
				.drawText(2, 2, _gameDate, 0xffffff, 255, true, 1024, 0x00cf00, 2);
				.visible = true;
			}else{
				.visible = false;
			}
		}

		_sprComment.font.face = FONT_DEFAULT_FACE;
		_sprComment.font.height = 21;
		drawComment(0);
		_sprComment.visible = true;

		with(_sprRealDate){
			if(_realDate != ""){
				.fillRect(0, 0, .width, .height, RGBA(0,0,64,96));
				var w = .font.getTextWidth(_realDate);
				.font.height = .height - 2;
				.drawText(.width\2 - .font.getTextWidth(_realDate)\2, 2, _realDate, 0xffffff);
				.visible = true;
			}else{
				.visible = false;
			}
		}

		var w = _sprComment.font.getTextWidth(_comment);
		if(_sprComment.width < w){
			_messOver = true;
		}else{
			_messOver = false;
		}

		with(_sprRoot){
			if(_root){
				.assignImages(IMG_SAVEDATA_CHAR[_root-1]);
				.setSizeToImageSize();
				.visible = true;
			}else{
				.visible = false;
			}
		}
	}

	function setupThumb(){
		var img = new global.Layer(window, this);
		img.loadImages(DATA_PATH + _thumb);
		img.setSizeToImageSize();
		_sprThumb.copyRect(0, 0, img, 0, 0, img.width, img.height);
		_sprThumb.visible = true;
	}

	function reset(){
		_sprNumber.fillRect(0, 0, _sprNumber.width, _sprNumber.height, 0);
		_sprRealDate.fillRect(0, 0, _sprRealDate.width, _sprRealDate.height, 0);
		_sprComment.fillRect(0, 0, _sprComment.width, _sprComment.height, 0);
		_sprThumb.visible = false;
		_btn[0].visible = false;
		_sprRoot.visible = false;
	}

	function onButtonDownL(target){
		parent.onButtonDownL(this);
	}

	function onButtonEnter(target){
		if(typeof parent.parent._editComment != "undefined"){
			if(parent.parent._editComment.visible) return;
		}

		if(_messOver){
			_scrollTimer.enabled = true;
		}

		if(lock){
			_btn[5].opacity = 255;
			return;
		}

		for(var i=1;i<_btn.count;i++) _btn[i].opacity = 255;

		if(_type != 0){
			for(var i=1;i<_btn.count;i++){
				_btn[i].visible = false;
			}
		}
	}
	function onButtonLeave(target){
		for(var i=1;i<_btn.count;i++) _btn[i].opacity = 0;

		if(_messOver){
			_scrollX = 0;
			drawComment(0);
			_scrollTimer.enabled = false;
		}
	}
	function onScrollComment(){
		var w = _sprComment.font.getTextWidth(_comment);
		drawComment(_scrollX);

		_scrollX += 2;
		if(-_scrollX < -w){
			_scrollX = -_sprComment.width;
		}
	}

	function drawComment(x){
		_sprComment.fillRect(0, 0, _sprComment.width, _sprComment.height, 0);
		var e = DEF_FONT_STYLE;
		var ratio = (_sprComment.height - _sprComment.font.height) \ 2;

		var col = e.color;
		if(_commentEdit) col = 0x7fffcf;

		_sprComment.drawText(-x + 2, ratio + 1, _comment, col, e.opa, e.aa, e.shadowlevel, 0x000000, e.shadowwidth, e.shadowx, e.shadowy);
	}

	function validButton(f){
		_btn[0].visible = f;

		//ボタンの有無でコメントレイヤの親を切り替える
		if(_btn[0].visible){
			_sprComment.parent = _btn[0];
			_sprComment.absolute = _btn[1].absolute - 1;
		}else{
			_sprComment.parent = this;
		}
	}

	function validControlButton(f){
		for(var i=1;i<_btn.count;i++){
			_btn[i].valid = f;
			_btn[i].visible = f;
		}
	}

	property lock{
		getter(){return (_btn[5].state != 0);}
		setter(v){
			_btn[5].state = v?1:0;
			var hoge = [1, 2, 3, 4];
			for(var i=0;i<hoge.count;i++){
				_btn[hoge[i]].opacity = _btn[5].state?0:255;
				_btn[hoge[i]].valid = _btn[5].state?false:true;
				_btn[hoge[i]].visible = _btn[5].state?false:true;
			}
		}
	}

	class ControlButton extends Button{
		function ControlButton(win, par){
			super.Button(...);
		}

		function onMouseEnter(x, y, shift){
			super.onMouseEnter(...);
			parent.onMouseEnter(...);
		}
		function onMouseLeave(x, y, shift){
			super.onMouseLeave(...);
			parent.onMouseLeave(...);
		}

		function onMouseDown(x, y, button, shift){
			releaseCapture();
			if((button == mbLeft) && _valid){
				if(typeof parent.parent.parent.onButtonDownL != "undefined")
					parent.parent.parent.onButtonDownL(this);
			}else if((button == mbRight)){
				if(typeof parent.parent.parent.onButtonDownR != "undefined")
					parent.parent.parent.onButtonDownR(this);
			}
		}
	}
	class ControlToggleButton extends ToggleButton{
		function ControlToggleButton(win, par){
			super.ToggleButton(...);
		}

		function onMouseEnter(x, y, shift){
			super.onMouseEnter(...);
			parent.onMouseEnter(...);
		}
		function onMouseLeave(x, y, shift){
			super.onMouseLeave(...);
			parent.onMouseLeave(...);
		}

		function onMouseDown(x, y, button, shift){
			releaseCapture();
			state = !state;
			if((button == mbLeft) && _valid){
				if(typeof parent.parent.parent.onButtonDownL != "undefined")
					parent.parent.parent.onButtonDownL(this);
			}else if((button == mbRight)){
				if(typeof parent.parent.parent.onButtonDownR != "undefined")
					parent.parent.parent.onButtonDownR(this);
			}
		}
	}
}

var IMG_SAVEDATA_TAG1 = null;
var IMG_SAVEDATA_TAG2 = null;

class LoadSaveWindow extends SettingWindowBase{
	var DATASELECT_NONE = 0;
	var DATASELECT_COPY = 1;
	var DATASELECT_MOVE = 2;
	var DATASELECT_SWAP = 3;

	var LOAD_TONE = [ [1.0,   0, 255], [1.0,   0, 255], [2.5,   0, 255], 0, 0 ];

	var _fLoad;
	var _adv;

	var _base;
	var _book = [];
	var _bookGroup;
	var _page = [];
	var _pageTemp = [];
	var _pageGroup;
	var _save = [];
	var _new;
	var _newPage;
	var _btnClose;

	var _savePrev;
	var _savePrevTag;

	var _editComment;
	var _editType = 0;
	var _editBook = 0;
	var _editPage = 0;

	var _bookNo = -1;
	var _pageNo = -1;
	var _targetNo = -1;
	var _dstTargetNo = -1;
	var _targetFile = "";

	var _dataSelectMode = DATASELECT_NONE;

	function LoadSaveWindow(win, par){
		super.SettingWindowBase(...);
		mouseTrackingMode = global.ChainItemBase.MOUSETRACKINGMODE_FREE;

		IMG_SAVEDATA_TAG1 = new global.Layer(win, par);
		with(IMG_SAVEDATA_TAG1){
			.loadImages("FRM_0321");
			.setSizeToImageSize();
		}
		IMG_SAVEDATA_TAG2 = new global.Layer(win, par);
		with(IMG_SAVEDATA_TAG2){
			.loadImages("FRM_0322");
			.setSizeToImageSize();
		}
	}
	function finalize(){
		sysReg._closeSaveMenuIndex = _bookNo*10 + _pageNo;

		InvalidateArray(_book);
		InvalidateArray(_page);
		InvalidateArray(_save);

		invalidate _btnClose;
		invalidate _savePrev;
		invalidate _savePrevTag;
		invalidate _editComment;
		invalidate _bookGroup;
		invalidate _pageGroup;
		invalidate _new;
		invalidate _newPage;
		invalidate _base;

		invalidate IMG_SAVEDATA_TAG1;
		IMG_SAVEDATA_TAG1 = null;
		invalidate IMG_SAVEDATA_TAG2;
		IMG_SAVEDATA_TAG2 = null;

		window.editControlLeave();

		super.finalize();
	}
	function who(){return "LoadSaveWindow";}

	function create(fLoad=true, func=null){
		_fLoad = fLoad;
		_adv = func;

		setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
		if(fLoad)	fillRect(0, 0, width, height, 0x60101080);
		else		fillRect(0, 0, width, height, 0x60801010);
		absolute = LAYER_LOADSAVE;

		_base = new global.SelectItemGroupLayer(window, this);
		with(_base){
			.hasImage = true;
			if(fLoad)	.loadImages("FRM_0301");
			else		.loadImages("FRM_0302");
			.setSizeToImageSize();
			.setPos(129, 36);

			if(fLoad) AdjustGamma(_base, LOAD_TONE);

			.visible = true;
		}

		_bookGroup = new RadioButtonGroup();
		for(var i=0;i<SAVEDATA_BOOK_MAX+1;i++){
			_book[i] = new Tag(window, _base);
			with(_book[i]){
				.create(0, "%02d".sprintf(i+1));
				.visible = true;
				if(fLoad) AdjustGamma(_book[i]._btn, LOAD_TONE);
			}
			_bookGroup.add(_book[i]._btn);
			addChainItem(_book[i]._btn);
			_pageTemp[i] = 0;
		}
		_book[_book.count-1].setTagName("クイックセーブ");
		_book[_book.count-1]._btnEdit.visible = false;
		if(!_fLoad){
			_book[_book.count-1].valid = false;
			_book[_book.count-1].visible = false;
			_book[_book.count-1].opacity = 128;
			_bookGroup.remove(_book[_book.count-1]);
			removeChainItem(_book[_book.count-1]._btn);
		}

		_pageGroup = new RadioButtonGroup();
		for(var i=0;i<10;i++){
			_page[i] = new Tag(window, _base);
			with(_page[i]){
				.create(1, "%02d".sprintf(i+1));
				.setPos(455+64*i, 76);
				if(fLoad) AdjustGamma(_page[i]._btn, LOAD_TONE);
			}
			_pageGroup.add(_page[i]._btn);
			addChainItem(_page[i]._btn);
		}

		for(var i=0;i<9;i++){
			_save[i] = new SavedataHeader(window, _base);
			with(_save[i]){
				.setPos(260 + 296 * (i%3), 58 + 189 * (i\3));
				.visible = true;

				if(fLoad) AdjustGamma(_save[i], LOAD_TONE);
			}
			addChainItem(_save[i]._btn[0]);
		}

		_savePrev = new SavedataHeader(window, this);
		_savePrevTag = new global.Layer(window, this);

		_new = new global.Layer(win, this);
		with(_new){
			.loadImages("FRM_0307");
			.setSizeToImageSize();
			.hitThreshold = 256;
		}
		_newPage = new global.Sprite(win, this);
		with(_newPage){
			.loadImages("FRM_0308_");
			.setSizeToImageSize();
			.setCenter(0, .height);
			.setPos(_base.left+_book[0].left, _base.top+_book[0].top);
			.hitThreshold = 256;
		}

		var book = sysReg._closeSaveMenuIndex\10;
		var page = sysReg._closeSaveMenuIndex%10;
		_bookGroup.on(_book[book]._btn);
		_pageGroup.on(_page[page]._btn);

		_editComment = new EditLayer(window, this);
		with(_editComment){
			.font.face = FONT_DEFAULT_FACE;
			.bgOpacity = 128;
			.maxChars = 64;
		}

		_btnClose = new Button(window, this);
		with(_btnClose){
			.create("FRM_1101", 2);
			.setPos(0, 592);
		}

		if(!_fLoad && book == _book.count-1) book = 0;
		setPage(book, page);
		visible = true;
	}

	function setPage(book, page, preview=false){
		var prevBook = _bookNo;
		if(!preview){
			_bookNo = book;
			_pageNo = _pageTemp[_bookNo] = page;

			_bookGroup.on(_book[book]._btn);
			_pageGroup.on(_page[page]._btn);
		}
		if(isQSavePage()){
			setBookPageTag(150);
			setPageQ(preview);
			return;
		}

		for(var i=0;i<_page.count;i++) _page[i].visible = true;

		var index = book * SAVEDATA_PAGEDATA_MAX + page * SAVEDATA_PAGE_NUM;
		for(var i=0;i<9;i++){
			with(_save[i]){
				var obj = saveMan.at(index+i);
				.reset();

				if(obj.valid){
					.set(0, index+i+1, obj.realDate, obj.gameDate, obj.comment, obj.file, obj.root, obj.comment_edit);
				}else{
					.set(1, index+i+1);
				}
				.setupInfo();

				if(_fLoad && obj.valid == 0){
					.validButton(false);
				}else{
					if(obj.valid){
						.setupThumb();
						.validControlButton(true);
					}else{
						.validControlButton(false);
					}
					.validButton(true);
				}
				if(preview) .opacity = 128;
				else		.opacity = 255;

				.lock = obj.lock;
			}
		}

		setBookPageTag(prevBook!=book?150:0);
		setNewSaveMark();
		setNewSavePageMark();

		if(_dataSelectMode){
			for(var i=0;i<_save.count;i++){
				_save[i].validControlButton(false);
				var obj = saveMan.at(saveMan.getIndexFromBookIndex(_bookNo, _pageNo, i));
				if(obj.lock){
					_save[i].validButton(false);
				}else{
					_save[i].validButton(true);
				}
			}
		}
		for(var i=0;i<_save.count;i++) _save[i].onButtonLeave();

		for(var i=0;i<10;i++) addChainItem(_page[i]._btn);
	}
	function setPageQ(preview=false){
		for(var i=0;i<_page.count;i++) _page[i].visible = false;

		var i = 0;
		for(;i<saveMan.qsaveStack();i++){
			with(_save[i]){
				var obj = saveMan.atQSave(i);
				.reset();

				.set(1, -1, obj.realDate, obj.gameDate, obj.comment, obj.file, obj.root, obj.comment_edit);
				.setupInfo();

				if(_fLoad && obj.valid == 0){
					.validButton(false);
				}else{
					if(obj.valid){
						.setupThumb();
						.validControlButton(true);
					}else{
						.validControlButton(false);
					}
					.validButton(true);
				}
				if(preview) .opacity = 128;
				else		.opacity = 255;
			}
		}
		for(;i<9;i++){
			with(_save[i]){
				.reset();
			}
		}
		if(saveMan.qsaveStack()){
			_new.setPos(_base.left+_save[0].left+8, _base.top+_save[0].top+8);
			_new.visible = true;
		}else{
			_new.visible = false;
		}
		setNewSavePageMark();

		for(var i=0;i<_save.count;i++) _save[i].onButtonLeave();

		for(var i=0;i<10;i++) removeChainItem(_page[i]._btn);
	}
	function isQSavePage(){return (_bookNo == _book.count - 1);}

	function setBookPageTag(time=0){
		var bx = 5;
		var by = 54;

		var book = 0;
		for(;book<=_bookNo;book++){
			with(_book[book]){
				if(time){
					.setMovingEnvelope(.left, .top, bx, by, 2);
					.beginActivation(time);
				}else{
					.setPos(bx, by, 2);
				}
				.setPlacementPos(bx, by);

				by += .height + 1;
			}
		}
		if(_bookNo != SAVEDATA_BOOK_MAX){
			var px = bx + 48;
			var py = by;
			for(var page=0;page<SAVEDATA_PAGE_MAX;page++){
				with(_page[page]){
					if(time){
						.opacity = 0;
						.setBlendingEnvelope(255);
						.setMovingEnvelope(px-(16+(SAVEDATA_PAGE_MAX-page)*8), py, px, py, 2);
						.beginActivation(time + (page*25));
					}else{
						.setPos(px, py);
					}
					.setPlacementPos(px, py);
					py += .height + 1;
				}
			}
			by = py + 4;
		}
		for(;book<=SAVEDATA_PAGE_NUM+1;book++){
			with(_book[book]){
				if(time){
					.setMovingEnvelope(.left, .top, bx, by, 2);
					.beginActivation(time);
				}else{
					.setPos(bx, by, 2);
				}
				.setPlacementPos(bx, by);
				by += .height + 1;
			}
		}

		for(var i=0;i<SAVEDATA_BOOK_MAX;i++){
			var obj = saveMan.atBook(i);
			_book[i].setTagName(obj.bookname);
			_book[i]._tagName.visible = true;
			_book[i]._btnEdit.opacity = 0;
		}
		if(_bookNo != SAVEDATA_BOOK_MAX){
			for(var i=0;i<SAVEDATA_PAGE_MAX;i++){
				var obj = saveMan.atPage(_bookNo, i);
				_page[i].setTagName(obj.pagename);
				_page[i]._tagName.visible = true;
			}
		}
	}
	function setNewSaveMark(){
		if(sysReg._newSaveNo <= 0){
			_new.visible = false;
			return;
		}

		var index = _bookNo * 90 + _pageNo * 9;
		for(var i=0;i<9;i++){
			if(index + i == sysReg._newSaveNo - 1){
				_new.setPos(_base.left+_save[i].left+8, _base.top+_save[i].top+8);
				_new.visible = true;
				break;
			}else{
				_new.visible = false;
			}
		}
	}
	function setNewSavePageMark(){
		if(sysReg._newSaveNo <= 0){
			_newPage.visible = false;
			return;
		}

		var sv = _newPage.visible;
		var sx = _newPage.left;
		var sy = _newPage.top;
		var dx, dy;
		var dic = saveMan.getBookIndexFromIndex(sysReg._newSaveNo-1);
		if(_bookNo != dic.book){
			dx = _base.left+_book[dic.book].px-_newPage.width+8;
			dy = _base.top+_book[dic.book].py+16;
		}else{
			dx = _base.left+_page[dic.page].px-_newPage.width+8;
			dy = _base.top+_page[dic.page].py+16;
		}
		_newPage.setPos(dx, dy);
		_newPage.visible = true;

		var dv = _newPage.visible;

		if(sx != dx || sy != dy || sv != dv){
			with(_newPage){
				.opacity = 0;
				.setBlendingEnvelope(255);
				.setMovingEnvelope(sx, sy, dx, dy, 2);
				.beginActivation(300);
			}
		}
	}

	function onMouseWheel(shift, delta, x, y){
		var obj;
		if(delta < 0){
			obj = _pageGroup.next();
		}else if(delta > 0){
			obj = _pageGroup.prev();
		}
		onButtonDownL(obj);
	}

	function onButtonDownL(target){
		if(target == _btnClose){
			cancel();
			HitThresholdSelectItems(_page, 256);
			for(var i=0;i<_save.count;i++) _save[i]._btn.hitThreshold = 256;
			hide(300, LoadSaveDelete);
			return;
		}

		for(var i=0;i<_book.count;i++){
			if(target == _book[i] || target == _book[i]._btn){
				setPage(i, _pageTemp[i]);
				return;
			}
		}
		for(var i=0;i<_page.count;i++){
			if(target == _page[i] || target == _page[i]._btn){
				setPage(_bookNo, i);
				return;
			}
		}

		var type = 0;
		var iSave = 0;
		for(;iSave<_save.count;iSave++){
			if(target == _save[iSave])	break;
			else if(target == _save[iSave]._btn[1]){type = 1; break;}
			else if(target == _save[iSave]._btn[2]){type = 2; break;}
			else if(target == _save[iSave]._btn[3]){type = 3; break;}
			else if(target == _save[iSave]._btn[4]){type = 4; break;}
			else if(target == _save[iSave]._btn[5]){type = 5; break;}
		}

		var iBook = 0;
		for(;iBook<_book.count;iBook++){
			if(target == _book[iBook]._btnEdit){type = 6; break;}
		}
		var iPage = 0;
		for(;iPage<_page.count;iPage++){
			if(target == _page[iPage]._btnEdit){type = 7; break;}
		}

		var mess1, mess2, mess3;
		mess1 = mess2 = mess3 = "";

		if(_dataSelectMode){
			if(iSave >= _save.count) return;

			_dstTargetNo = _bookNo * SAVEDATA_PAGEDATA_MAX + _pageNo * SAVEDATA_PAGE_NUM + iSave;

			switch(_dataSelectMode){
			case DATASELECT_COPY : 
				if(CONFIG.confirmWindow[SystemRegister.CONFIRM_COPY])
					PlaySystemVoice("データコピー：確認");

				CallConfirm("データをコピーします。", SystemRegister.CONFIRM_COPY, copyDecide, copyCancel);
				break;
			case DATASELECT_MOVE : 
				if(CONFIG.confirmWindow[SystemRegister.CONFIRM_MOVE])
					PlaySystemVoice("データ移動：確認");

				CallConfirm("データを移動します。", SystemRegister.CONFIRM_MOVE, moveDecide, moveCancel);
				break;
			}
			dataSelectModeLeave();
			return;
		}else{
			_targetNo = _bookNo * SAVEDATA_PAGEDATA_MAX + _pageNo * SAVEDATA_PAGE_NUM + iSave;
		}

		var info;
		var systemVoice = "";

		var book = _targetNo \ 90;
		var num = (_targetNo - book*90) % 91 + 1;
		book++;

		_targetFile = "";

		switch(type){
		case 0 : 
			var info;
			if(isQSavePage()){
				info = saveMan.atQSave(iSave);
				mess1 = "$c:aquamarine,midnightblue;クイックロード$c;します";
				mess2 = mess3 = "";
				_targetFile = info.file;
			}else{
				info = saveMan.at(_targetNo);
				if(info.lock && !_fLoad) break;

				_targetFile = "save" + "%02d_%03d.bmp".sprintf(book, num);

				if(_fLoad)	mess1 = "$c:aquamarine,midnightblue;";
				else		mess1 = "$c:violet,indygo;";
				mess2 = "BOOK%02d−%02d番".sprintf(book, num);
				mess2 = han2zen(mess2);
				if(_fLoad){
					if(CONFIG.confirmWindow[SystemRegister.CONFIRM_LOAD])
						systemVoice = "ロード：確認";
					mess3 += "$c;をロードします。";
				}else{
					if(CONFIG.confirmWindow[SystemRegister.CONFIRM_OVERWRITE])
						systemVoice = "セーブ：上書き";
					mess3 += "$c;にセーブします。";
				}
			}

			if(info.valid){
				HitThresholdSelectItems(_page, 256);
				for(var i=0;i<_save.count;i++) _save[i]._btn.hitThreshold = 256;

				if(!confirm){
					confirm = true;
					if(systemVoice != "") PlaySystemVoice(systemVoice);
					CallConfirm(mess1+mess2+mess3, _fLoad?SystemRegister.CONFIRM_LOAD:SystemRegister.CONFIRM_OVERWRITE, decide, cancel);
				}
			}else{
				if(!confirm){
					confirm = true;
					decide();
				}
			}
			break;
		case 1 :
			PlaySystemVoice("コメント編集");
			with(_editComment){
				.setSize(288, 23);
				.font.height = 21;

				.text = _save[iSave]._comment;
				var pt = new Point();
				GetAbsolutePos(_save[iSave]._sprComment, pt, window.baseLayer);
				.setPos(pt.x, pt.y);
				invalidate pt;
				.goEndCaret();
				.visible = true;
				.focus();
				_save[iSave]._sprComment.visible = false;
			}
			_editType = 1;
			break;
		case 2 :
			PlaySystemVoice("データコピー");

			dataSelectModeEnter(DATASELECT_COPY);
			break;
		case 3 :
			PlaySystemVoice("データ移動：開始");

			dataSelectModeEnter(DATASELECT_MOVE);
			break;
		case 4 :
			mess1 = "$c:white,red;";
			mess2 = "BOOK%02d−%02d番".sprintf(book, num);
			mess2 = han2zen(mess2);
			mess3 += "$c;を削除します。";
			if(CONFIG.confirmWindow[SystemRegister.CONFIRM_DELETE])
				PlaySystemVoice("データ削除：確認");

			CallConfirm(mess1+mess2+mess3, SystemRegister.CONFIRM_DELETE, deleteDecide, deleteCancel);
			break;

		case 5 :
			var obj = saveMan.at(_targetNo);
			obj.lock = target.state?true:false;
			_save[iSave].lock = obj.lock;
			break;

		case 6 :
			with(_editComment){
				.setSize(186, 23);
				.font.height = 21;

				.text = saveMan.atBook(iBook).bookname;
				var pt = new Point();
				GetAbsolutePos(_book[iBook]._tagName, pt, window.baseLayer);
				.setPos(pt.x-2, pt.y-2);
				invalidate pt;
				.goEndCaret();
				.visible = true;
				.focus();
			}
			_editType = 2;
			_editBook = iBook;

			_book[iBook]._tagName.visible = false;
			break;
		case 7 :
			with(_editComment){
				.setSize(154, 21);
				.font.height = 18;

				.text = saveMan.atPage(_bookNo, iPage).pagename;
				var pt = new Point();
				GetAbsolutePos(_page[iPage]._tagName, pt, window.baseLayer);
				.setPos(pt.x-2, pt.y-2);
				invalidate pt;
				.goEndCaret();
				.visible = true;
				.focus();
			}
			_editType = 3;
			_editBook = _bookNo;
			_editPage = iPage;

			_page[iPage]._tagName.visible = false;
			break;

		default : break;
		}
	}

	function decide(){
		confirm = false;
		if(_fLoad){
			BeginLoad(LoadSaveDelete);
			PlaySystemVoice("ロード：実行");
			dm("ロードしました");
		}else{
			PlaySystemVoice("セーブ：実行");
			dm("セーブしました : " + _targetFile);

			VisibleSettingWindow(false);
			var save = new Savedata();

			var saveNo = _targetNo;
			//if(saveNo == -1) saveNo = 0;

			save.set(_adv);
			save.save(_targetFile, saveNo, _adv);
			invalidate save;
			VisibleSettingWindow(true);

			if(_targetFile != "qsave.bmp"){
				sysReg._newSaveNo = _targetNo + 1;
				SaveSystemRegister();
			}

			setPage(_bookNo, _pageNo);		//情報更新

			cancel();
		}
	}
	function cancel(){
		if(!isvalid this) return;

		confirm = false;
		HitThresholdSelectItems(_page, 0);
		for(var i=0;i<_save.count;i++) _save[i]._btn.hitThreshold = 0;
		_targetNo = -1;
		_targetFile = "";
		super.cancel();
	}

	function copyDecide(){
		saveMan.copy(_targetNo, _dstTargetNo);

		setPage(_bookNo, _pageNo);		//情報更新
	}
	function copyCancel(){}

	function moveDecide(){
		saveMan.move(_targetNo, _dstTargetNo);

		setPage(_bookNo, _pageNo);		//情報更新
	}
	function moveCancel(){}

	function deleteDecide(){
		saveMan.del(_targetNo);

		setPage(_bookNo, _pageNo);		//情報更新
		_editComment.visible = false;
	}
	function deleteCancel(){
	}

	function onEditControlOk(target){
		switch(_editType){
		case 1 : 
			var save;
			if(_bookNo != _book.count - 1){
				save = saveMan.at(_targetNo);
			}else{
				save = saveMan.atQSave(_targetNo % 90);
			}
			save.comment_edit = true;
			save.comment = _editComment.text;

			break;

		case 2 : 
			var obj = saveMan.atBook(_editBook);
			obj.bookname = target.text;

			_book[_editBook]._tagName.visible = true;
			break;

		case 3 : 
			var obj = saveMan.atPage(_editBook, _editPage);
			obj.pagename = target.text;

			_page[_editPage]._tagName.visible = true;
			break;
		}

		saveMan.save();
		setPage(_bookNo, _pageNo);		//情報更新
		_editComment.visible = false;

		_editType = _editBook = _editPage = 0;
	}
	function onEditControlLeave(target){
		setPage(_bookNo, _pageNo);		//情報更新
		_editComment.visible = false;
	}

	function dataSelectModeEnter(type){
		_dataSelectMode = type;

		var obj = saveMan.at(_targetNo);
		with(_savePrev){
			.setPos(cursorX - .width \ 2, cursorY + 4);
			.set(0, _targetNo+1, obj.realDate, obj.gameDate, obj.comment, obj.file, obj.root, obj.comment_edit);
			.setupInfo();
			.setupThumb();
			.opacity = 196;
			.visible = true;
		}
		with(_savePrevTag){
			switch(type){
			case DATASELECT_COPY :
				.loadImages("FRM_0343");
				break;
			case DATASELECT_MOVE :
				.loadImages("FRM_0344");
				break;
			}
			.setSize(.imageWidth\2, .imageHeight);
			.setPos(_savePrev.left + 14, _savePrev.top + 19);
			.visible = true;
		}

		_book[_book.count-1].visible = false;

		setPage(_bookNo, _pageNo);		//情報更新
	}
	function dataSelectModeLeave(){
		_dataSelectMode = false;

		_savePrev.visible = false;
		_savePrevTag.visible = false;

		if(_fLoad) _book[_book.count-1].visible = true;

		setPage(_bookNo, _pageNo);		//情報更新
	}

	function onMouseMove(x, y, shift){
		if(_dataSelectMode){
			_savePrev.setPos(cursorX - _savePrev.width \ 2, cursorY + 4);
			_savePrevTag.setPos(_savePrev.left + 14, _savePrev.top + 19);
		}
	}

	function onMouseDown(x, y, button, shift, windowNotify=false){

		if(confirm) return;
		if(IsLoadProccesing()) return;

		if(button == mbRight && _dataSelectMode && windowNotify){
			dataSelectModeLeave();
		}else if(button == mbRight && windowNotify){
			cancel();
			HitThresholdSelectItems(_page, 256);
			for(var i=0;i<_save.count;i++) _save[i]._btn.hitThreshold = 256;
			hide(300, LoadSaveDelete);
		}
	}
	function onKeyDown(key, shift){
		if(confirm) return;
		if(IsLoadProccesing()) return;

		switch(key){
		case VK_ESCAPE : 
			if(_dataSelectMode){
				dataSelectModeLeave();
			}else{
				cancel();
				HitThresholdSelectItems(_page, 256);
				for(var i=0;i<_save.count;i++) _save[i]._btn.hitThreshold = 256;
				hide(300, LoadSaveDelete);
			}
			break;
		case VK_PRIOR : 
			onButtonDownL(_pageGroup.prev());
			break;
		case VK_NEXT : 
			onButtonDownL(_pageGroup.next());
			break;
		case VK_TAB : 
			var i;
			for(i=0;i<_save.count;i++){
				if(_save[i]._btn.isEnter()){
					mouseTracking(_pageGroup.getOn());
					break;
				}
			}
			if(i >= _save.count) mouseTracking(_save[0]);
			break;
		}
		super.onKeyDown(...);
	}

	function action(ev){
		if(ev.type == "onCloseQuery"){
			if(_dataSelectMode) dataSelectModeLeave();
		}
	}

	class Tag extends SelectItemGroupSprite{
		var _type;
		var _name = "";
		var _btn;
		var _btnEdit;
		var _tagName;
		var _tagNo;

		var _px, _py;

		var _tagNameSizeOver;
		var _tagNameX;
		var _tagNameTimer;

		function Tag(win, par){
			super.SelectItemGroupSprite(...);

			_tagNameTimer = new Timer(onTagNameCallback, "");
			_tagNameTimer.interval = 25;
		}
		function finalize(){
			_tagNameTimer.enabled = false;
			invalidate _tagNameTimer;

			invalidate _btn;
			invalidate _btnEdit;
			invalidate _tagName;
			invalidate _tagNo;
		}

		function create(type=0, id=""){
			_type = type;
			_btn = new RadioButton(window, this);
			_tagName = new global.Layer(window, this);
			_tagNo = new global.Layer(window, this);
			_btnEdit = new ControlButton(window, this);

			var nPtn = 3;
			switch(type){
			case 0 :
				setSize(IMG_SAVEDATA_TAG1.width \ nPtn, IMG_SAVEDATA_TAG1.height);
				with(_btn){
					.create(IMG_SAVEDATA_TAG1, nPtn);
				}
				with(_btnEdit){
					.create(IMG_SAVEDATA_COM1, 2);
					.setPos(223, 3);
					.opacity = 0;
				}
				with(_tagName){
					.setSize(186, 23);
					.setPos(40, 4);
					.font.face = FONT_DEFAULT_FACE;
					.font.height = 21;
					.hitThreshold = 256;
					.visible = true;
				}
				with(_tagNo){
					.font.height = 16;
					.setSize(32, .font.height+2);
					.setPos(22, 8);
					.drawText(1, 1, id, 0xffffff, 255, true, 1024, 0x000000, 2);
					.hitThreshold = 256;
					.visible = true;
				}
				break;
			case 1 :
				setSize(IMG_SAVEDATA_TAG2.width \ nPtn, IMG_SAVEDATA_TAG2.height);

				with(_btn){
					.create(IMG_SAVEDATA_TAG2, nPtn);
				}
				with(_btnEdit){
					.create(IMG_SAVEDATA_COM2, 2);
					.setPos(180, 3);
					.opacity = 0;
				}
				with(_tagName){
					.setSize(151, 20);
					.setPos(24, 3);
					.font.face = FONT_DEFAULT_FACE;
					.font.height = 18;
					.hitThreshold = 256;
					.visible = true;
				}
				with(_tagNo){
					.font.height = 13;
					.setSize(32, .font.height+2);
					.setPos(8, 8);
					.drawText(1, 1, id, 0xffffff, 255, true, 1024, 0x000000, 2);
					.hitThreshold = 256;
					.visible = true;
				}
				break;
			}
		}

		function setTagName(name="", x=-1){
			if(x == -1) _name = name;

			with(_tagName){
				.clear(0x00000000);

				if(x == -1){
					_tagNameSizeOver = (.font.getTextWidth(name) > .width);
					x = 0;
				}

				.drawText(1+x, 1, name, 0xffffff, 255, true, 1024, 0x000000, 2);
			}
		}

		function setPlacementPos(x, y){
			_px = x;
			_py = y;
		}
		property px{
			getter(){return _px;}
		}
		property py{
			getter(){return _py;}
		}

		function onTagNameCallback(){
			setTagName(_name, -_tagNameX);
			_tagNameX += 2;
			if(_tagNameX > _tagName.font.getTextWidth(_name)) _tagNameX = -_tagName.width;
		}

		function onButtonDownL(){
			parent.onButtonDownL(this);
		}

		function onButtonEnter(target){
			if(parent.parent._editComment.visible) return;

			_btnEdit.opacity = 255;

			if(_tagNameSizeOver){
				_tagNameX = 0;
				_tagNameTimer.enabled = true;
			}
		}
		function onButtonLeave(target){
			_btnEdit.opacity = 0;

			if(_tagNameTimer.enabled){
				_tagNameTimer.enabled = false;
				setTagName(_name);
			}
		}

		class ControlButton extends Button{
			function ControlButton(win, par){
				super.Button(...);
			}

			function onMouseEnter(x, y, shift){
				super.onMouseEnter(...);
				parent.onMouseEnter(...);
			}
			function onMouseLeave(x, y, shift){
				super.onMouseLeave(...);
				parent.onMouseLeave(...);
			}

			function onMouseDown(x, y, button, shift){
				releaseCapture();
				if((button == mbLeft) && _valid){
					if(typeof parent.parent.parent.onButtonDownL != "undefined")
						parent.parent.parent.onButtonDownL(this);
				}else if((button == mbRight)){
					if(typeof parent.parent.parent.onButtonDownR != "undefined")
						parent.parent.parent.onButtonDownR(this);
				}
			}
		}
	}
}

function CallLoadSave(fLoad=true, obj=null){
	if(IsAnyWindow()) return false;

	SPR_LOADSAVE = new LoadSaveWindow(win, win.baseLayer);
	SPR_LOADSAVE.create(fLoad, obj);
	SPR_LOADSAVE.visible = true;
	SPR_LOADSAVE.show(300);

	return true;
}
function LoadSaveDelete(){
	if(SPR_LOADSAVE === null) return;

	var file = SPR_LOADSAVE._targetFile;
	invalidate SPR_LOADSAVE;
	SPR_LOADSAVE = null;

	if(file != "")
		game.action(%[type:"load", files:[file]]);
}

class HistoryWindow extends SettingWindowBase{
	var PAGE_MAX = 10;
	var MARGIN_LEFT = 129+64;
	var MARGIN_TOP = 32;
	var MARGIN_BOTTOM = WINDOW_HEIGHT;

	var _adv;

	var _advPreview;
	var _advPreviewObj;

	var _index = 0;

	var _base;
	var _sld;
	var _btn = [];
	var _btnClose;

	var _imgBtnL, _imgBtnS, _imgJump;

	var _log = [];

	var _max = 0;

	var _enableInput;

	var _jumpLogIndex = -1;

	var _eol = false;

	function HistoryWindow(win, par, adv){
		super.SettingWindowBase(win, par);

		setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
		hitThreshold = 0;

		_base = new global.Layer(win, this);
		with(_base){
			.loadImages("FRM_0401");
			.setSizeToImageSize();
			.setPos(129, 0);
			.visible = true;
		}

		absolute = LAYER_HISTORY;

		_adv = adv;

		_imgBtnL = new global.Layer(win, this);
		with(_imgBtnL){
			.loadImages("FRM_0109");
			.setSizeToImageSize();
		}
		_imgBtnS = new global.Layer(win, this);
		with(_imgBtnS){
			.loadImages("FRM_0109");
			.setSizeToImageSize();
		}
		_imgJump = new global.Layer(win, this);
		with(_imgJump){
			.loadImages("FRM_0414");
			.setSizeToImageSize();
		}

		for(var i=0;i<PAGE_MAX;i++) _log[i] = new Log(win, this);

		var index = DLimit(_adv._logName.count-10, 0);
		var num = setPage(index, true);

		_btnClose = new Button(window, this);
		with(_btnClose){
			.create("FRM_1101", 2);
			.setPos(0, 592);
		}

		if(num < _adv._logName.count){
			_max = _adv._logName.count - num;
			_sld = new SliderV(win, this);
			_sld.create("FRM_0411", 28, 650, 2, _max);
			_sld.setPos(1226, 36);
			_sld.trim = _max;

			_btn[0] = new Button(win, this);
			_btn[0].create("FRM_0412", 2);
			_btn[0].setPos(1224, 6);
			_btn[1] = new Button(win, this);
			_btn[1].create("FRM_0413", 2);
			_btn[1].setPos(1224, 686);
		}

		setPage(0);

		_advPreview = new global.Sprite(win, this);
		with(_advPreview){
			.absolute = 10000;
			.hitThreshold = 256;
		}

		_enableInput = false;
	}
	function finalize(){
		InvalidateArray(_log);
		invalidate _base;
		invalidate _sld;
		InvalidateArray(_btn);
		invalidate _btn;
		invalidate _btnClose;

		invalidate _imgBtnL;
		invalidate _imgBtnS;
		invalidate _imgJump;

		invalidate _advPreview;
		if(_advPreviewObj !== void) invalidate _advPreviewObj;

		super.finalize();
	}

	function showEnd(){
		setTransitionCompleteCall();
		_enableInput = true;
	}

	function setPage(index=0, test=false){
		if(_sld !== void) _sld.trim = _sld._range - index;

		_index = index;
		for(var i=0;i<_log.count;i++){
			_log[i].setPos(MARGIN_LEFT, MARGIN_BOTTOM);
			_log[i].visible = false;
		}

		var li = _adv._logName.count - index - 1;

		var fOver = false;
		var i = 0;
		while(li >= 0 && i < _adv._logName.count){
			if(i >= _log.count) _log.add(new Log(window, this));

			var name = _adv._logName[li];
			var mess = _adv._logMess[li];
			var voice = _adv._logVoice[li];
			var pan = _adv._logParam[li].pan;

			var names = name.split("/");
			if(names.count == 1)	name = names[0];
			else					name = names[1];

			if(name == "心の声" || name == "語り") name = "";

			var font = %[];
			with(font){
				var ref = _adv._logParam[li].font;
				.face = ref.face;
				if(.face == "") .face = ADV_FONT_MESS_FACE;

				if(ref.color == -1)	.color = Log.FONT_COLOR;
				else				.color = ref.color;
				if(ref.bkcolor == -1)	.bkcolor = Log.FONT_BKCOLOR;
				else					.bkcolor = ref.color;

				if(true){
				//レンダリング済みフォント使用
					var ref = PRFONT_DIC[GetFontFace(.face)];
					.indent = GetElm(ref, ref.height + 4, ADV_FONT_MESS_INDENT);
				}else{
					var size = ref.size;

					.size = int(size * _messScale);
					.indent = .size + 2;
					.bold = ref.bold;
					.italic = ref.italic;
				}
			}
			with(_log[i]){
				.set(name, mess, voice, pan, font, li, test);
				if(i == 0)	.setPos(MARGIN_LEFT, MARGIN_BOTTOM - .height);
				else		.setPos(MARGIN_LEFT, _log[i-1].top - .height);
				.visible = true;

				if(i == 0)	.separate = false;
				else		.separate = true;

				//最新ログにはジャンプボタンを表示しない。
				.validJumpButton = !(li >= _adv._logName.count-1);
				//回想モード中はジャンプボタンを表示しない。
				if(.validJumpButton) .validJumpButton = !IsRecollect();

				if(_log[i].top <= MARGIN_TOP){
					fOver = true;
					break;
				}
			}

			i++;
			li--;
		}

		if(!fOver){
			var j=i-1;
			_log[j].setPos(_log[j].left, MARGIN_TOP);
			j--;
			for(;j>=0;j--){
				_log[j].setPos(_log[j].left, _log[j+1].top+_log[j+1].height);
			}

			if(li < 0)	_eol = true;
			else		_eol = false;
		}else{
			_eol = false;
		}

		return i;
	}

	function prev(step=1){
//		if(_eol) return;

		_index += step;
		if(_max < _index){
			_index = _max;
		}
		setPage(_index);
	}
	function next(step=1){
		if(_index <= 0){
			hide(150, HistoryDelete);
		}else{
			_index -= step;
			if(_index < 0) _index = 0;
			setPage(_index);
		}
	}

	function onMouseWheel(shift, delta, x, y){
		if(!_enableInput) return;

		if(delta < 0){
			next(Math.abs(delta)\120);
		}else if(delta > 0){
			prev(Math.abs(delta)\120);
		}
	}
	function onMouseDown(x, y, button, shift){
		if(!_enableInput) return;

		if(button == mbRight){
			hide(150, HistoryDelete);
		}
	}
	function onKeyDown(key, shift){
		if(!_enableInput) return;

		switch(key){
		case VK_ESCAPE : hide(150, HistoryDelete); break;
		case VK_UP : prev(); break;
		case VK_PRIOR : prev(6); break;
		case VK_DOWN : next(); break;
		case VK_NEXT : next(6); break;
		}
		super.onKeyDown(...);
	}

	function onButtonDownL(target){
		if(!_enableInput) return;

		switch(target){
		case _btnClose : 
			hide(300, HistoryDelete);
			break;
		case _btn[0]: prev(); break;
		case _btn[1]: next(); break;
		default :
			for(var i=0;i<_log.count;i++){
				var index = _log[i].getVoiceButtonIndex(target);
				if(index != -1){
					var file = _log[i].getVoiceName(index);
					if(index == 0)	_adv.playVoice(%[file:file, pan:_log[i].pan, config:false]);
					else			_adv.playVoice(%[file:file, config:false]);
					@if(__DEBUGMODE__)
						_adv._msg.playVoice();
					@endif
					break;
				}
			}
			break;
		}
	}

	function onJumpButtonDown(target){
		_jumpLogIndex = target.logIndex;

		if(CONFIG.confirmWindow[SystemRegister.CONFIRM_LOGJUMP])
			PlaySystemVoice("バックログジャンプ：確認");

		CallConfirm("こちらへジャンプします。", SystemRegister.CONFIRM_LOGJUMP, jumpDecide, jumpCancel);
	}
	function onJumpButtonEnter(target){
		_adv.visible = _adv._msg.visible = false;

		visible = false;
		var ref = _adv._logParam[target.logIndex];
		var layer = new global.Layer(window, this);
		var select = _adv._logSelect;

		if(_advPreviewObj === void)
			_advPreviewObj = new ADVScreen(win, LAYER_ADVSCREEN, LAYER_ADVMESSAGE, , true);

		with(_advPreviewObj){
			.jumpPreview(_adv, ref.scenario, ref.hitret, select);
			.visible = true;
			.screenShot(layer, false);
			.visible = false;
		}

		with(_advPreview){
			var pos = new Point();
			GetAbsolutePos(target, pos);
			if(1){
				var scale = 3;
				.setSize(128*scale, 72*scale);

				pos.x = pos.x + target._btnJump.width + 4;
				pos.y = pos.y + target.height \ 2 - .height \ 2;
			}else{
				var h = int(target.height * 0.75);
				var w = int(1280 * (h / WINDOW_HEIGHT));
				.setSize(w, h);

				var messW = target.rectMess.width;
				if(messW < target.rectName.width) messW = target.rectName.width;

				pos.x = target.left + target.MARGIN_LEFT + messW + 8;
				pos.y = pos.y + target.height\2 - .height \ 2 - 2;
			}

			.stretchCopy(0, 0, .width, .height, layer, 0, 0, layer.width, layer.height, stFastLinear);

			if(_advPreviewObj.HScene) .doBoxBlur(4, 4);

			var screenRect = new Rect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
			var previewRect = new Rect(pos.x, pos.y, pos.x+.width, pos.y+.height);
			if(!screenRect.isInnerRect(previewRect)){
				if(screenRect.left > previewRect.left) previewRect.setPos(screenRect.left, previewRect.top);
				if(screenRect.right < previewRect.right) previewRect.setPos(screenRect.width - previewRect.width, previewRect.top);
				if(screenRect.top > previewRect.top) previewRect.setPos(previewRect.left, screenRect.top);
				if(screenRect.bottom < previewRect.bottom) previewRect.setPos(previewRect.left, screenRect.height - previewRect.height);
			}

			.setPos(previewRect.left, previewRect.top);

			invalidate pos;
			invalidate screenRect;
			invalidate previewRect;

			.opacity = 0;
			.setBlendingEnvelope(255);
			.beginActivation(200);

			.visible = true;
		}
		invalidate layer;

		_adv.visible = _adv._msg.visible = true;
		visible = true;
	}
	function onJumpButtonLeave(target){
		with(_advPreview){
			.visible = false;
		}
	}

	function jumpDecide(){
		PlaySystemVoice("バックログジャンプ：実行");

		hide(300, HistoryDelete);

		var ref = _adv._logParam[_jumpLogIndex];
		_adv.jump(ADVScreen.JUMPSTATE_NORMAL, %[scenario:ref.scenario, hitret:ref.hitret, select:ref.select]);
		_jumpLogIndex = -1;
	}
	function jumpCancel(){
		_jumpLogIndex = -1;
	}

	function onSliderMoveStart(target){
		onSliderMove(target);
	}
	function onSliderMove(target){
		if(!_enableInput) return;

		var i = target.range - target.trim;
		if(_index != i){
			_index = i;
			setPage(_index);
		}
	}

	class Log extends SelectItemGroupLayer{
		var MARGIN_TOP = 12;
		var MARGIN_BOTTOM = 12;
		var MARGIN_LEFT = 128;
		var MARGIN_RIGHT = 16;

		var _ma;
		var _separate;
		var _btnVoice;
		var _btnVoices = [];

		var _btnJump;

		var _voice;
		var _pan;

		var _logIndex = -1;

		var _label;

		var _rectName = new Rect();
		var _rectMess = new Rect();

		function Log(win, par){
			SelectItemGroupLayer(...);

			_ma = new MessageArea(window, this, true, global.GetFontFace);
			with(_ma){
				.setMargin(MARGIN_LEFT, MARGIN_TOP, WINDOW_WIDTH, WINDOW_HEIGHT);
				.setDefaultDrawTextParam(FONT_COLOR, 255, true, 3024, RGB(32, 32, 32), 3, 0, 0);
				.setDefaultFontStyle(ADV_FONT_MESS_FACE, ADV_FONT_MESS_SIZE, ADV_FONT_MESS_INDENT);
				.resetDrawTextParam();
				.resetFontStyle();
				.enableRuby(false);
				.visible = true;
			}

			_separate = new global.Layer(win, this);
			with(_separate){
				.loadImages("FRM_0402");
				.setSizeToImageSize();
			}

			_btnVoice = new Button(win, this);
			with(_btnVoice){
				.create(parent._imgBtnL, 2);
			}

			_btnJump = new Button(win, this);
			with(_btnJump){
				.create(parent._imgJump, 2);
			}

			_label = new global.Layer(win, this);
			with(_label){
				.font.face = GetFontFace("21");
			}

			_rectName = new Rect();
			_rectMess = new Rect();
		}
		function finalize(){
			invalidate _ma;
			invalidate _separate;
			invalidate _btnVoice;

			invalidate _btnJump;

			invalidate _label;

			invalidate _rectName;
			invalidate _rectMess;

			InvalidateArray(_btnVoices);
		}

		function set(name, mess, v, p, font=null, li=0, test=false){
			_voice = v;
			_pan = p;
			_logIndex = li;

			for(var i=0;i<mess.length;i++){
				if(mess[i] != _ma.enterCode){
					if(i != 0) mess = mess.substring(i);
					break;
				}
			}

			var str = "";
			if(name == "")	str = mess;
			else			str = name + "／" + mess;

			//更新サイズを調べる
			var fontName = %[];
			(Dictionary.assignStruct incontextof fontName)(font);
			fontName.face = "30";
			fontName.indent = 34;
			_rectName.assign(_ma.getUpdateRect(name, fontName));
			_rectMess.assign(_ma.getUpdateRect(mess, font));

			//レイヤサイズを調整
			setSize(_separate.width, MARGIN_TOP+MARGIN_BOTTOM+rectName.height+rectMess.height+_separate.height);
			_ma.setSize(width, height);

			if(name != "")
				_ma.output(name + "／", true, fontName, , !test);
			_ma.output(mess, true, font, , !test);

			_separate.setPos(0, height - _separate.height);

			if(v != ""){
				_btnVoice.setPos(84, height\2-_btnVoice.height\2 - 3);
				_btnVoice.visible = true;
			}else{
				_btnVoice.visible = false;
			}

			InvalidateArray(_btnVoices);
			_btnVoices.clear();

			var voices = v.split("/");
			if(voices.count > 1){
				for(var i=0;i<voices.count;i++){
					_btnVoices[i] = new VoiceButton(window, this);
					with(_btnVoices[i]){
						.create(parent._imgBtnS, 2);
						var rect = _ma.getUpdateRect(name, font);
						.base_x = MARGIN_LEFT+rect.width+i*(.width)+16;
						.base_y = MARGIN_TOP+rect.height\2-.height\2;
						.setPos(.base_x, .base_y);

						var obj = CHAR_DATA[VCID_TO_INDEX[voices[i].substring(0, 3)]];
						if(obj !== void){
							if(obj.name == "")	.hintLabel = "モブキャラ";
							else				.hintLabel = obj.name;
						}else{
							.hintLabel = "その他";
						}
					}
				}
			}

			_btnJump.setPos(0, height\2 - _btnJump.height\2);
		}

		function getVoiceButtonIndex(target){
			if(target == _btnVoice) return 0;
			for(var i=0;i<_btnVoices.count;i++){
				if(target == _btnVoices[i]) return i + 1;
			}
			return -1;
		}
		function getVoiceName(index){
			if(index == 0) return _voice;

			var voices = _voice.split("/");
			if(1 <= index && index <= voices.count)
				return voices[index - 1];

			return "";
		}

		function onButtonEnter(target){
			switch(target){
			case _btnJump : 
				parent.onJumpButtonEnter(this);
				break;
			case _btnVoice : break;
			default : 
				var i = 0;
				for(;i<_btnVoices.count;i++){
					if(target == _btnVoices[i]) break;
				}

				with(_label){
					var w = .font.getTextWidth(_btnVoices[i].hintLabel);
					var elm = PRFONT_DIC[.font.face];
					.setSize(w+8, elm.height+4);
					.fillRect(0, 0, .width, .height, 0x0);
					.drawText(0, 0+elm.ratio, _btnVoices[i].hintLabel, GetDefineColor("white"), 255, true, 2048, GetDefineColor("black"), 2, 0, 0);
					.setPos(_btnVoices[i].base_x+_btnVoices[i].width+4, _btnVoices[i].base_y+_btnVoices[i].height\2-elm.height\2);
					.visible = true;
				}

				i++;
				for(;i<_btnVoices.count;i++){
					with(_btnVoices[i]){
						.flushActivation();
						.setMovingEnvelope(.base_x, .base_y, .left+_label.width+4, .top, 2);
						.beginActivation(150);
					}
				}
				break;
			}
		}
		function onButtonLeave(target){
			_label.visible = false;

			switch(target){
			case _btnJump : 
				parent.onJumpButtonLeave(this);
				break;
			default : 
				for(var i=1;i<_btnVoices.count;i++){
					with(_btnVoices[i]){
						.flushActivation();
						.setMovingEnvelope(.left, .top, .base_x, .base_y, 2);
						.beginActivation(150);
					}
				}
			}
		}

		function onButtonDownL(target){
			switch(target){
			case _btnJump : 
				parent.onJumpButtonDown(this);
				break;
			default : 
				super.onButtonDownL(target);
				break;
			}
		}

		property separate{
			getter(){return _separate.visible;}
			setter(v){return _separate.visible = v;}
		}

		property ma{
			getter(){return _ma;}
		}
		property rectName{
			getter(){return _rectName;}
		}
		property rectMess{
			getter(){return _rectMess;}
		}

		property voice{
			getter(){return _voice;}
		}
		property pan{
			getter(){return _pan;}
		}
		property logIndex{
			getter(){return _logIndex;}
		}
		property validJumpButton{
			getter(){return _btnJump.valid;}
			setter(v){
				_btnJump.valid = v;
				_btnJump.visible = v;
			}
		}

		class VoiceButton extends SelectItemBaseSprite{
			var _nPattern;
			var _nNormal;
			var _nFocus;
			var _nInvalid;

			function VoiceButton(win, par){
				super.SelectItemBaseSprite(win, par);
			}

			function kind(){return "VoiceButton";}

			function create(file, nPattern=3){
				if(typeof file == "Object"){
					_width = file.imageWidth / nPattern;
					_height = file.imageHeight;
					setSize(_width, _height);
					setImageSize(file.imageWidth, file.imageHeight);
					copyRect(0, 0, file, 0, 0, file.imageWidth, file.imageHeight);
				}else{
					loadImages(file);
					_width = imageWidth / nPattern;
					_height = imageHeight;
					setSize(_width, _height);
				}
				visible = true;

				_nPattern = nPattern;
				_nNormal = 0;
				_nFocus = _nPattern >= 2 ? 1 : 0;
				_nInvalid = _nPattern >= 3 ? 2 : 0;

				setButton(_nNormal);
			}

			function onMouseDown(x, y, button, shift){
				releaseCapture();
				if((button == mbLeft) && _valid){
					if(typeof parent.onButtonDownL != "undefined")
						parent.onButtonDownL(this);
				}else if((button == mbRight)){
					if(typeof parent.onButtonDownR != "undefined")
						parent.onButtonDownR(this);
				}
			}

			function onMouseEnter(){
				super.onMouseEnter();

				if(!_valid) return;

				setButton(_nFocus);
			}
			function onMouseLeave(){
				super.onMouseLeave();

				if(!_valid) return;

				setButton(_nNormal);
			}
			function onValid(){setButton(_nNormal);}
			function onInvalid(){setButton(_nInvalid);}

			property ptnNormal{
				getter(){return _nNormal;}
				setter(v){_nNormal = v;}
			}
			property ptnFocus{
				getter(){return _nFocus;}
				setter(v){_nFocus = v;}
			}
			property ptnInvalid{
				getter(){return _nInvalid;}
				setter(v){_nInvalid = v;}
			}
		}
	}
	Log.FONT_COLOR = RGB(255, 255, 255);
	Log.FONT_BKCOLOR = RGB(32, 32, 64);
}

function CallHistory(adv){
	if(IsAnyWindow()) return false;

	SPR_HISTORY = new HistoryWindow(win, win.baseLayer, adv);
	SPR_HISTORY.visible = true;
	SPR_HISTORY.show(150);
}
function HistoryDelete(){
	if(SPR_HISTORY === null) return;
	invalidate SPR_HISTORY;
	SPR_HISTORY = null;
}

//各種ウィンドウの基底クラス
class SettingWindowBase extends Sprite, SelectItemNotifyBase, InputNotifyBase, ChainItemBase{
	var _fShow = false;
	var _preFocus = 0;

	var _onConfirm;

	var _fExclusive;		//イベント配信を独占するか

	function SettingWindowBase(win, par, fExclusive=true){
		Sprite(...);
		opacity = 0;

		_fExclusive = fExclusive;

		_onConfirm = false;
	}

	function finalize(){
		global.Sprite.finalize();

		win.removeInputNotify(this);
		if(_fExclusive){
			if(_fShow == false){
				//イベントの配信を再開させる
				removeMode();
				win.setFocus(_preFocus);
			}
		}
	}

	function who(){return "SettingWindowBase";}

	function show(time){
		if(_fShow == true) return;

		setTransitionCompleteCall(showEnd, true);
		setBlendingEnvelope(255);
		beginActivation(time);

		_fShow = true;

		win.addInputNotify(this);

		if(_fExclusive){
			//イベントの配信を禁止させる
			setMode();
			_preFocus = win.focus;
			win.setFocus(this);
		}
	}
	function showEnd(){
	}
	function hide(time, func=null){
		if(_fShow == false) return;

		setTransitionCompleteCall(func, true);
		setBlendingEnvelope(0);
		beginActivation(time);
		_fShow = false;
	}
	function action(ev){
		if(ev.type == "onFileDrop"){
			game.load(ev.files[0], true);
		}
	}

	function cancel(){
		confirm = false;
	}

	function addChainItem(obj){
		if(obj === void) return;
		global.ChainItemBase.addChainItem(obj);
	}
	function removeChainItem(obj){
		if(obj === void) return;
		global.ChainItemBase.removeChainItem(obj);
	}
	function removeChainItemAll(){
		global.ChainItemBase.removeChainItemAll();
	}

	property confirm{
		setter(v){_onConfirm = v;}
		getter(){return _onConfirm;}
	}
}

function IsSettingWindow(){
	if(SPR_LOADSAVE != null) return true;
	if(SPR_HISTORY != null) return true;
	if(SPR_CONFIG != null) return true;
	if(SPR_CONFIRM != null) return true;
	return false;
}
function HideSettingWindow(){
	var time = 300;
	if(SPR_LOADSAVE != null) SPR_LOADSAVE.hide(time, LoadSaveDelete);
	if(SPR_HISTORY != null) SPR_HISTORY.hide(time, HistoryDelete);
	if(SPR_CONFIG != null) SPR_CONFIG.hide(time, ConfigDelete);
	if(SPR_CONFIRM !== null) SPR_CONFIRM.hide(time, ConfirmDelete);
}
function VisibleSettingWindow(f){
	var time = 300;
	if(SPR_LOADSAVE != null) SPR_LOADSAVE.visible = f;
	if(SPR_HISTORY != null) SPR_HISTORY.visible = f;
	if(SPR_CONFIG != null) SPR_CONFIG.visible = f;
	if(SPR_CONFIRM != null) SPR_CONFIRM.visible = f;
}

var SPR_LOADSAVE = null;
var SPR_HISTORY = null;
var SPR_CONFIG = null;
function IsAnyWindow(){
	var ret = false;
	ret |= (SPR_LOADSAVE != null);
	ret |= (SPR_HISTORY != null);
	ret |= (SPR_CONFIG != null);
	return ret;
}
