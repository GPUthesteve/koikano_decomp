
class StaffRoll extends Sprite, InputNotifyBase{
	var _adv;
	var _bgm;
	var _fPlayBgm = false;

	var _te = [];
	var _seqList;

	var _voice = [];

	var _tgtChar = -1;
	var _tgtCredit;

	var _ptCenter = [640, 360];
	var _creditBase;
	var _creditBasePos;
	var _credit = [];

	var _spr = %[];

	var _onDrawTimer;

	var _volumeBgm;

	var SPR_LOGO = 0;

	var IMAGE_LIST = [
//		%[id:"BAR_H", col:RGBA(0,0,0), w:WINDOW_WIDTH, h:720], 
//		%[id:"BAR_V", col:RGBA(0,0,0), w:1280, h:WINDOW_HEIGHT], 
		%[id:"BAR", file:"FRM_0804"], 

		%[id:"CA02A001M", file:"CA02A001M"], 
		%[id:"CB02A001M", file:"CB02A001M"], 
		%[id:"CC02A001M", file:"CC02A001M"], 
		%[id:"CD02A001M", file:"CD02A001M"], 
		%[id:"LOGO", file:"FRM_0511a"]
	];

	function StaffRoll(win, par, type, adv=null){
		Sprite(...);

		setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
		hitThreshold = 0;

		absolute = LAYER_STAFFROLL;

		//âπä÷åWí‚é~
		StopBgm(1000);
		StopSe("", 1000);
		StopEnvSe("", 1000);
		StopVoice(1000);

		_adv = adv;
//		_adv.hide(, true);

		_seqList = Scripts.evalStorage("StaffrollSequence.tjs");

		switch(type){
		case   "ê^óD": _tgtChar = 0; SetGlobalFlag( 2, 1); break;
		case   "êÁìﬁ": _tgtChar = 1; SetGlobalFlag( 3, 1); break;
		case "ÉAÉäÉX": _tgtChar = 2; SetGlobalFlag( 4, 1); break;
		case   "ïSâ‘": _tgtChar = 3; SetGlobalFlag( 5, 1); break;
		default : _tgtChar = 0; break;
		}

		var seqProcess = _seqList.process; 
		var time = 0;
		for(var i=0;i<seqProcess.count;i++){
			seqProcess[i].id = i;
			time = int GetElm(seqProcess[i].time, time);
			seqProcess[i].time = time + (int GetElm(seqProcess[i].delay, 0));
			if(seqProcess[i].file !== void){
				var param = %[
					id : seqProcess[i].file, 
					file : seqProcess[i].file, 
					tone : seqProcess[i].tone, 
					adv : 1
				];
				if(seqProcess[i].label.indexOf("Char") != -1) param.char = 1;
				IMAGE_LIST.add(param);
			}
		}
		_te[_te.count] = new TimerEvent(seqProcess);

		var seqChar = _seqList.cg[_tgtChar];
		var time = 0;
		for(var i=0;i<seqChar.count;i++){
			seqChar[i].id = i;
			time = int GetElm(seqChar[i].time, time);
			seqChar[i].time = time + (int GetElm(seqChar[i].delay, 0));
			if(seqChar[i].file !== void){
				var param = %[
					id : seqChar[i].file, 
					file : seqChar[i].file, 
					tone : seqChar[i].tone, 
					adv : 1
				];
				if(seqChar[i].label.indexOf("Char") != -1) param.char = 1;
				IMAGE_LIST.add(param);
			}
		}
		_te[_te.count] = new TimerEvent(seqChar);

		for(var i=0;i<IMAGE_LIST.count;i++){
			this[IMAGE_LIST[i].id] = new global.Layer(window, this);
			with(this[IMAGE_LIST[i].id]){
				if(IMAGE_LIST[i].file !== void){
					if(IMAGE_LIST[i].adv === void){
						.loadImages(IMAGE_LIST[i].file);
					}else{
						var info = AdvObjLoadImagesToLayer(this[IMAGE_LIST[i].id], IMAGE_LIST[i].file);
						.info = info;
					}
					if(IMAGE_LIST[i].char !== void)
						.setImageSize(.imageWidth, WINDOW_HEIGHT<.imageHeight?WINDOW_HEIGHT:.imageHeight);

					if(IMAGE_LIST[i].tone !== void)
						AdjustGamma(this[IMAGE_LIST[i].id], TONE_DIC[IMAGE_LIST[i].tone]);
					.setSizeToImageSize();
				}else{
					.setSize(IMAGE_LIST[i].w, IMAGE_LIST[i].h);
					.fillRect(0, 0, .width, .height, IMAGE_LIST[i].col);
				}
			}
		}

		_spr.bg = new global.Sprite(window, this);
		with(_spr.bg){
			.hitThreshold = 256;
		}
		_spr.char = new global.Sprite(window, this);
		with(_spr.char){
			.hitThreshold = 256;
		}

		_spr.Cutin1 = new Cutin(this);
		_spr.Cutin2 = new Cutin(this);
		_spr.Cutin3 = new Cutin(this);
		_spr.Cutin4 = new Cutin(this);

		_spr.barH = [];
		_spr.barV = [];
		for(var i=0;i<2;i++){
			_spr.barH[i] = new global.Sprite(window, this);
			with(_spr.barH[i]){
				.assignImages(BAR);
				.setSizeToImageSize();
				.hitThreshold = 256;
			}
			_spr.barV[i] = new global.Sprite(window, this);
			with(_spr.barV[i]){
				.assignImages(BAR);
				.setSizeToImageSize();
				.hitThreshold = 256;
			}
		}

		createCredit(_seqList.credit);

		var bgmFile= "BGM_ED.ogg";
		_bgm = new WaveSoundBuffer(this);
		_bgm.open(bgmFile);
		_volumeBgm = CONFIG.muteBgm?0:100000*CONFIG.volBgm;
		_volumeBgm *= 1.5;
		if(_volumeBgm > 100000) _volumeBgm = 100000;
		_bgm.volume = _volumeBgm;

		_onDrawTimer = new Timer(onDrawCg, "");
		_onDrawTimer.interval = 50;

		window.addInputNotify(this);
	}
	function finalize(){
		window.removeInputNotify(this);

		InvalidateArray(_voice);
		InvalidateArray(_te);

		InvalidateArray(_credit);
		invalidate _creditBase;
		invalidate _creditBasePos;

		_onDrawTimer.enabled = false;
		invalidate _onDrawTimer;

		for(var i=0;i<2;i++){
			invalidate _spr.barH[i];
			invalidate _spr.barV[i];
		}
		invalidate _spr.bg;
		invalidate _spr.char;

		invalidate _spr.Cutin1;
		invalidate _spr.Cutin2;
		invalidate _spr.Cutin3;
		invalidate _spr.Cutin4;

		for(var i=0;i<IMAGE_LIST.count;i++){
			invalidate this[IMAGE_LIST[i].id];
		}

		invalidate _bgm;
		invalidate _seqList;
	}

	function createCredit(list=[]){
		var px = 0, py = 0;
		var MARGIN = 2;
		_creditBasePos = new global.Sprite(window, this);
		_creditBase = new global.Sprite(window, _creditBasePos);
		for(var i=0;i<list.count;i++){
			_credit[i] = new global.Layer(window, _creditBase);
			var elm = list[i];
			with(_credit[i]){
				if(elm.text !== void){
					var info;
					if(0){
						switch(elm.font){
						case 12 : .font.face = GetFontFace("30"); break;
						case 21 : .font.face = GetFontFace("21"); break;
						case 30 : .font.face = GetFontFace("30"); break;
						}

						info = PRFONT_DIC[.font.face];
					}else{
						.font.face = "ÉÅÉCÉäÉI,HGä€∫ﬁºØ∏M-PRO,ÇlÇr ÉSÉVÉbÉN";
						.font.height = elm.font;
						info = %[
						height : .font.height,
						ratio : 0
						];
					}
					.font.bold = int GetElm(elm.bold, true, false);
					.font.italic = int GetElm(elm.italic, true, false);

					var text = elm.text.split("/");
					var lw = 0;
					var w = [];
					for(var j=0;j<text.count;j++){
						text[j] = text[j].trim();
						w[j] = .font.getTextWidth(text[j]);
						if(lw < w[j]) lw = w[j];
					}

					var indent = info.height + elm.indent2;
					.setSize(lw + MARGIN * 2, indent * text.count + MARGIN * 2);
					for(var j=0;j<text.count;j++){
						.drawText(.width\2-w[j]\2, MARGIN + indent * j + info.ratio, text[j], GetDefineColor(elm.color), 255, true, 4000, 0x0, 4, 0, 0);
					}

				}else if(elm.file !== void){
					.loadImages(elm.file);
					.setSizeToImageSize();
				}

				py += elm.indent1;
				.setPos(_ptCenter[0] - .width\2, py);
				py += .height;

				.visible = true;
			}
		}

		with(_creditBasePos){
			.hasImage = false;
			.setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
			.setCenter(.width\2, 0);
			.hitThreshold = 256;
			.absolute = 10000;
		}
		with(_creditBase){
			.hasImage = false;
			.setSize(1280, py);
			.hitThreshold = 256;
			.visible = true;
		}
	}

	function start(){
		for(var i=0;i<_te.count;i++) _te[i].start(onEvent);
	}
	function close(){
		_onDrawTimer.enabled = false;

		_adv.visible = true;
		_bgm.stop();
		visible = false;

		var async = new AsyncTrigger(StaffRollDelete, "");
		async.mode = atmAtIdle;
		async.trigger();

		_adv.action(%[type:"staffroll_end"]);
	}
	function onMouseDown(x, y, button, shift){
		if(isActivation()) flushActivation();
		if(button == mbRight) end(true);
	}
	function onKeyDown(key, shift){
		if(isActivation()) flushActivation();
		if(key == VK_ESCAPE) end(true);
	}

	function onEvent(label, id, delay, elm){
		//dm(...);
		switch(label){
		case "start" : 
			visible = true;
			if(CONFIG.muteMaster == 0 && CONFIG.muteBgm == 0){
				_bgm.play();
				_fPlayBgm = true;
			}
			_onDrawTimer.enabled = true;
			break;

		case "advHide" : 
			with(_adv){
				.hide(, true);
				.visible = false;
				.addOrderList(%[tagname:"cg", file:"BLACK"]);
				._update |= UPDATE_CG;
				.update(%[time:0]);
			}
			break;

		case "creditStart" : 
			with(_creditBasePos){
				.setPos(640, 0);
				.visible = true;
			}
			with(_creditBase){
				.setPos(0, WINDOW_HEIGHT);
				.setMovingEnvelope(.left, .top, .left, WINDOW_HEIGHT - .height);
				.beginActivation(elm.life);
			}

			break;
		case "CreditMove" : 
			var x = GetElm(elm.x, 0);
			var accel = GetElm(elm.accel, 2);
			var life = GetElm(elm.life, 300);
			with(_creditBasePos){
				.setMovingEnvelope(.left, .top, x, .top, accel);
				.beginActivation(life);
				.visible = true;
			}
			break;

		case "BgSlide" : 
			var bx = int GetElm(elm.bx, 0);
			var by = int GetElm(elm.by, 0);
			var bmx = int GetElm(elm.bmx, 0);
			var bmy = int GetElm(elm.bmy, 0);
			var accel = int GetElm(elm.accel, 0);
			var life = int GetElm(elm.life, 10000);
			with(_spr.bg){
				.stopActivation();

				.assignImages(this[elm.file]);
				.setSizeToImageSize();
				.setCenter(.width\2, .height\2);
				.setPos(WINDOW_CENTER_X+bx, WINDOW_CENTER_Y+by);

				if(bmx | bmy){
					.setMovingEnvelope(.left, .top, .left+bmx, .top+bmy, accel);
					.beginActivation(life);
				}

				.visible = true;
			}
			break;
		case "BgZoom" : 
			var bx = int GetElm(elm.bx, 0);
			var by = int GetElm(elm.by, 0);
			var from = int GetElm(elm.from, 100);
			var to = int GetElm(elm.to, 100);
			var life = int GetElm(elm.life, 10000);
			with(_spr.bg){
				.stopActivation();

				.assignImages(this[elm.file]);
				.setSizeToImageSize();
				.setAffineOffset(.width\2, .height\2);
				.setCenter(.width\2, .height\2);
				.setPos(WINDOW_CENTER_X+bx, WINDOW_CENTER_Y+by);

				.setZoomingEnvelope(from, to);
				.beginActivation(life);
			}
			break;
		case "BgFade" : 
			var fade = int GetElm(elm.fade, 255);
			var life = int GetElm(elm.life, 300);
			with(_spr.bg){
				.stopActivation();

				.setBlendingEnvelope(fade);
				.beginActivation(life);
			}
			break;
		case "ChangeBg" : 
			with(_spr.bg){
				.assignImages(this[elm.file]);
				.setSizeToImageSize();
				.setCenter(.width\2, .height\2);
			}
			break;

		case "CharSlide" : 
			var cx = int GetElm(elm.cx, 0);
			var cy = int GetElm(elm.cy, 0);
			var cmx = int GetElm(elm.cmx, 0);
			var cmy = int GetElm(elm.cmy, 0);
			var accel = int GetElm(elm.accel, 0);
			var life = int GetElm(elm.life, 10000);
			with(_spr.char){
				.stopActivation();

				.assignImages(this[elm.file]);
				.setSizeToImageSize();
				.setCenter(this[elm.file].info.guidex, this[elm.file].info.guidey);
				.setPos(WINDOW_CENTER_X+cx, WINDOW_CENTER_Y+cy);

				if(cmx | cmy){
					.setMovingEnvelope(.left, .top, .left+cmx, .top+cmy, accel);
					.beginActivation(life);
				}

				.visible = true;
			}
			break;
		case "ChangeChar" : 
			with(_spr.char){
				.assignImages(this[elm.file]);
				.setSizeToImageSize();
				.setCenter(this[elm.file].info.guidex, this[elm.file].info.guidey);
			}
			break;
		case "CharHide" : 
			with(_spr.char){
				.visible = false;
			}
			break;

		case "Cutin" : 
			with(_spr[elm.name]){
				.create(elm);
				.visible = true;
			}
			break;
		case "CutinAction" : 
			with(_spr[elm.name]){
				.stopActivation();

				var mx = int GetElm(elm.mx, 0);
				var my = int GetElm(elm.my, 0);
				var trans = int GetElm(elm.trans, .opacity);
				var accel = int GetElm(elm.accel, 0);
				var life = int GetElm(elm.life, 300);

				.setBlendingEnvelope(trans);
				.setMovingEnvelope(.left, .top, .left+mx, .top+my, accel);
				.beginActivation(life);
			}
			break;
		case "CutinHide" : 
			if(elm.name === void){
				_spr["Cutin1"].reset();
				_spr["Cutin2"].reset();
				_spr["Cutin3"].reset();
				_spr["Cutin4"].reset();
			}else{
				_spr[elm.name].reset();
			}
			break;

		case "OpenFilterH" : 
			var openHeight = GetElm(elm.height, 240);
			var center = GetElm(elm.center, WINDOW_CENTER_Y);
			if(center == "bg") center = _spr.bg.top;
			if(center == "char") center = _spr.char.top;
			with(_spr.barH[0]){
				.setPos(WINDOW_CENTER_X-.width\2, center-.height);

				.setMovingEnvelope(.left, .top, .left, .top-openHeight, 2);
				.beginActivation(300);
			}
			with(_spr.barH[1]){
				.setPos(WINDOW_CENTER_X-.width\2, center);

				.setMovingEnvelope(.left, .top, .left, .top+openHeight, 2);
				.beginActivation(300);
			}
			_spr.barH[0].visible = _spr.barH[1].visible = true;
			_spr.barV[0].visible = _spr.barV[1].visible = false;
			break;

		case "OpenFilterV" : 
			var openWidth = GetElm(elm.width, 240);
			var center = GetElm(elm.center, WINDOW_CENTER_X);
			if(center == "bg") center = _spr.bg.left;
			if(center == "char") center = _spr.char.left;
			with(_spr.barV[0]){
				.setPos(center-.width, WINDOW_CENTER_Y-.height\2);

				.setMovingEnvelope(.left, .top, .left-openWidth, .top, 2);
				.beginActivation(300);
			}
			with(_spr.barV[1]){
				.setPos(center, WINDOW_CENTER_Y-.height\2);

				.setMovingEnvelope(.left, .top, .left+openWidth, .top, 2);
				.beginActivation(300);
			}
			_spr.barH[0].visible = _spr.barH[1].visible = false;
			_spr.barV[0].visible = _spr.barV[1].visible = true;
			break;
		case "FilterHide" : 
			_spr.barH[0].visible = _spr.barH[1].visible = false;
			_spr.barV[0].visible = _spr.barV[1].visible = false;
			break;
		case "FilterFade" : 
			var fade = int GetElm(elm.fade, 255);
			var life = int GetElm(elm.life, 300);
			if(_spr.barH[0].visible){
				with(_spr.barH[0]){
					.setBlendingEnvelope(fade);
					.beginActivation(life);
				}
			}
			if(_spr.barH[1].visible){
				with(_spr.barH[1]){
					.setBlendingEnvelope(fade);
					.beginActivation(life);
				}
			}
			if(_spr.barV[0].visible){
				with(_spr.barV[0]){
					.setBlendingEnvelope(fade);
					.beginActivation(life);
				}
			}
			if(_spr.barV[1].visible){
				with(_spr.barV[1]){
					.setBlendingEnvelope(fade);
					.beginActivation(life);
				}
			}
			break;

		case "end" : end(); break;
		}
	}

	function playVoice(id, file){
		var header = file.substring(0, 2);
		if(CheckPlayVoice(header)){
			var vol = 100000;
			vol *= CONFIG.volVoice;
			vol *= CONFIG.voiceDetails[HEADER_TO_ID[header]].volume;

			_voice[id].volume = vol;
		}
		//_voice[id].volume *= 0.7;
		_voice[id].play();
	}

	function onDrawCg(){
	}

	function end(fFlash=false){
		_fPlayBgm = false;
		_bgm.stop();

		setTransitionCompleteCall(close);
		setBlendingEnvelope(0);
		if(fFlash)	beginActivation(0);
		else		beginActivation(3000);

		with(_adv){
			.addOrderList(%[tagname:"cg", file:"BLACK"]);
			._update |= UPDATE_CG;
			.update(%[time:0]);
		}
	}

	function action(ev){
	}

	class Cutin extends Sprite{
		var _owner;
		function Cutin(owner){
			_owner = owner;
			Sprite(_owner.window, _owner);
			hitThreshold = 256;
		}

		function create(param=%[]){
			//--------------------------------------
			//ï\é¶ç¿ïW
			var pos = GetElm(param.pos, [0, 0]);
			var from = GetElm(param.from, [0, 0]);
			from[0] = pos[0] + from[0];
			from[1] = pos[1] + from[1];
			//â¡çHå≥ÉCÉÅÅ[ÉW
			var image = _owner[param.image];
			//êÿÇËî≤Ç´ãÈå`
			var trim = param.trim;
			//íÜêSà íu
			var center = param.center;
			//ägèk
			var zoom = GetElm(param.zoom, [0, 0, 100, 100]);
			//â¡ë¨ìx
			var accel = int GetElm(param.accel, 2);
			//çXêVéûä‘
			var life = int GetElm(param.life, 200);
			//--------------------------------------

			var mask = new global.Layer(window, this);
			var rect = new Rect(trim[0][0], trim[0][1], trim[1][0], trim[1][1]);
			for(var i=2;i<trim.count;i++){
				rect.add(new Rect(trim[0][0], trim[0][1], trim[i][0], trim[i][1]));
			}
			var bulge = 4;
			rect.bulge(bulge);
			for(var i=0;i<trim.count;i++){
				trim[i][0] -= rect.left;
				trim[i][1] -= rect.top;
			}

			var app = new GdiPlus.Appearance();
			with(mask){
				.setSize(rect.width, rect.height);

				app.addBrush(RGBA(255,255,255), 0, 0);
				.drawPolygon(app, trim);
			}

			setSize(rect.width, rect.height);

			copyRect(0, 0, image, rect.left, rect.top, rect.width, rect.height);
			operateRect(0, 0, mask, 0, 0, mask.width, mask.height, omSubtractive);

			app.clear();
			app.addPen(RGBA(255,255,255), %[width:4, lineJoin:GdiPlus.LineJoinRound], 0, 0);
			_image.drawPolygon(app, trim);

			//app.clear();
			//app.addPen(RGBA(0,0,255, 128), 2, 0, 0);
			//_image.drawRectangle(app, 0, 0, width-1, height-1);

			if(center === void)	center = new Point(image.width\2, image.height\2);
			else				center = new Point(center[0], center[1]);
			center.x -= rect.left;
			center.y -= rect.top;

			setCenter(center.x, center.y);
			setAffineOffset(center.x, center.y);

			setPos(from[0], from[1]);
//			setZoomingEnvelope(0, 100, 2);
			var path = [
//			.left, .top, .absolute, 255, 100, 100, 0, 
				from[0], from[1], absolute, 255, zoom[0], zoom[1], 0, 
				(pos[0]+from[0])\2, (pos[1]+from[1])\2, absolute, 255, (zoom[2]+zoom[0])\2, (zoom[3]+zoom[1])\2, 0, 
				pos[0], pos[1], absolute, 255, zoom[2], zoom[3], 0
			];
			setMovingSplineEnvelope2(path, accel);
			beginActivation(life);

			invalidate app;
			invalidate mask;
		}
		function reset(){
			setImageSize(16, 16);
			visible = false;
		}
	}
}
StaffRoll.CG_STATE_IDLE		= 0;
StaffRoll.CG_STATE_START	= 1;
StaffRoll.CG_STATE_ACTIVE	= 2;
StaffRoll.CG_STATE_ENDING	= 3;
StaffRoll.CG_STATE_END		= 4;

var SPR_STAFFROLL = null;
function CallStaffRoll(type, adv=null){
	if(SPR_STAFFROLL != null) return;

	SPR_STAFFROLL = new StaffRoll(win, win.baseLayer, type, adv);

	var async = new AsyncTrigger(StaffRollStart, "");
	async.mode = atmAtIdle;
	async.trigger();
}

function StaffRollStart(){
	if(SPR_STAFFROLL == null) return;

	//SPR_STAFFROLL.start();
	OnceCall(SPR_STAFFROLL.start, 2000);
}

function StaffRollDelete(){
	if(SPR_STAFFROLL == null) return;

	OnceCallCancel(SPR_STAFFROLL.start);

	invalidate SPR_STAFFROLL;
	SPR_STAFFROLL = null;
}

function IsStaffRoll(){
	return (SPR_STAFFROLL != null);
}
